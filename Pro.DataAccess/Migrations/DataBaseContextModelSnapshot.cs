// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pro.DataAccess;

namespace Pro.DataAccess.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pro.Entities.EEquipmentCom", b =>
                {
                    b.Property<int>("EEquipmentComID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AstahlakYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("EEquipmentComID");

                    b.HasIndex("OwnerId");

                    b.ToTable("EEquipmentComs");
                });

            modelBuilder.Entity("Pro.Entities.EEquipmentH", b =>
                {
                    b.Property<int>("EEquipmentHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AstahlakYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("EEquipmentHID");

                    b.HasIndex("OwnerId");

                    b.ToTable("EEquipmentHs");
                });

            modelBuilder.Entity("Pro.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountBrashna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AirCandition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AreaBuilding")
                        .HasColumnType("float");

                    b.Property<string>("BSolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDayDaily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillRecive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapacityG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountLiveINFamily")
                        .HasColumnType("int");

                    b.Property<string>("CountryLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EAlltime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EHour")
                        .HasColumnType("int");

                    b.Property<string>("EMCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExpenseG")
                        .HasColumnType("float");

                    b.Property<double>("ExpenseOld")
                        .HasColumnType("float");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("FormNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GhastVar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ghozar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GhozarLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourOnStove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourUG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JaktionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kichen")
                        .HasColumnType("int");

                    b.Property<double>("Land")
                        .HasColumnType("float");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveWF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiveWFAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId1")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerSave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayForEAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayOnTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rezayat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<string>("SolorAmountAssets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceEType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suggestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tazkira")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeYear")
                        .HasColumnType("int");

                    b.Property<string>("TypeHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeIncome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseGenerator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseTypeWarming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VillageLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WC")
                        .HasColumnType("int");

                    b.Property<string>("WantEAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WayContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenUG")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerId");

                    b.HasIndex("OwnerId1");

                    b.HasIndex("UserId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Pro.Entities.OwnerLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("OwnerLanguages");
                });

            modelBuilder.Entity("Pro.Entities.OwnerTypeWarming", b =>
                {
                    b.Property<int>("TypeWarmingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("TypeWarmingId");

                    b.HasIndex("OwnerId");

                    b.ToTable("OwnerTypeWarmings");
                });

            modelBuilder.Entity("Pro.Entities.PowerMeter", b =>
                {
                    b.Property<int>("PowerMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DigitalOrAnalog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDMeter")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("PowerMeterId");

                    b.HasIndex("OwnerId");

                    b.ToTable("PowerMeters");
                });

            modelBuilder.Entity("Pro.Entities.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountBrashna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AirCandition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AreaBuilding")
                        .HasColumnType("float");

                    b.Property<string>("BSolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillDayDaily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillRecive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapacityG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountLiveINFamily")
                        .HasColumnType("int");

                    b.Property<string>("CountryLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EAlltime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EHour")
                        .HasColumnType("int");

                    b.Property<string>("EMCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExpenseG")
                        .HasColumnType("float");

                    b.Property<double>("ExpenseOld")
                        .HasColumnType("float");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("FormNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GhastVar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ghozar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GhozarLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourOnStove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HourUG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JaktionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kichen")
                        .HasColumnType("int");

                    b.Property<double>("Land")
                        .HasColumnType("float");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveWF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiveWFAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayForEAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayOnTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("PhoneLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rezayat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room")
                        .HasColumnType("int");

                    b.Property<string>("SolorAmountAssets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceEType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suggestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tazkira")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeYear")
                        .HasColumnType("int");

                    b.Property<string>("TypeHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeIncome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseGenerator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseTypeWarming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VillageLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WC")
                        .HasColumnType("int");

                    b.Property<string>("WantEAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WayContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenUG")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Pro.Entities.RentEEquipmentH", b =>
                {
                    b.Property<int>("EEquipmentHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AstahlakYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("EEquipmentHID");

                    b.HasIndex("RentId");

                    b.ToTable("RentEEquipmentHs");
                });

            modelBuilder.Entity("Pro.Entities.RentEquipmentCom", b =>
                {
                    b.Property<int>("EEquipmentComID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AstahlakYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("EEquipmentComID");

                    b.HasIndex("RentId");

                    b.ToTable("RentEquipmentComs");
                });

            modelBuilder.Entity("Pro.Entities.RentLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId");

                    b.HasIndex("RentId");

                    b.ToTable("RentLanguages");
                });

            modelBuilder.Entity("Pro.Entities.RentPowerMeter", b =>
                {
                    b.Property<int>("PowerMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DigitalOrAnalog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDMeter")
                        .HasColumnType("int");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("PowerMeterId");

                    b.HasIndex("RentId");

                    b.ToTable("RentPowerMeters");
                });

            modelBuilder.Entity("Pro.Entities.RentResident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("ResidentId");

                    b.HasIndex("RentId");

                    b.ToTable("RentResidents");
                });

            modelBuilder.Entity("Pro.Entities.RentTypeWarming", b =>
                {
                    b.Property<int>("TypeWarmingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("TypeWarmingId");

                    b.HasIndex("RentId");

                    b.ToTable("RentTypeWarmings");
                });

            modelBuilder.Entity("Pro.Entities.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("ResidentId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Pro.Entities.identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Pro.Entities.identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaim");
                });

            modelBuilder.Entity("Pro.Entities.identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisterDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CONVERT(DATETIME, CONVERT(VARCHAR(20),GetDate(), 120))");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Pro.Entities.identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Pro.Entities.identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Pro.Entities.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Pro.Entities.identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pro.Entities.EEquipmentCom", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany("EEquipmentComs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.EEquipmentH", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany("EEquipmentHs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.Owner", b =>
                {
                    b.HasOne("Pro.Entities.Owner", null)
                        .WithMany("Owners")
                        .HasForeignKey("OwnerId1");

                    b.HasOne("Pro.Entities.identity.User", "User")
                        .WithMany("Owners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pro.Entities.OwnerLanguage", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany("Languages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.OwnerTypeWarming", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.PowerMeter", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany("PowerMeters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.Rent", b =>
                {
                    b.HasOne("Pro.Entities.identity.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pro.Entities.RentEEquipmentH", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("RentEEquipmentHs")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.RentEquipmentCom", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("RentEquipmentComs")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.RentLanguage", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("RentLanguages")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.RentPowerMeter", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("PowerMeters")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.RentResident", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("Residents")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.RentTypeWarming", b =>
                {
                    b.HasOne("Pro.Entities.Rent", "Rent")
                        .WithMany("RentTypeWarmings")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("Pro.Entities.Resident", b =>
                {
                    b.HasOne("Pro.Entities.Owner", "Owner")
                        .WithMany("Residents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pro.Entities.identity.RoleClaim", b =>
                {
                    b.HasOne("Pro.Entities.identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pro.Entities.identity.UserClaim", b =>
                {
                    b.HasOne("Pro.Entities.identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pro.Entities.identity.UserRole", b =>
                {
                    b.HasOne("Pro.Entities.identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pro.Entities.identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pro.Entities.Owner", b =>
                {
                    b.Navigation("EEquipmentComs");

                    b.Navigation("EEquipmentHs");

                    b.Navigation("Languages");

                    b.Navigation("Owners");

                    b.Navigation("PowerMeters");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Pro.Entities.Rent", b =>
                {
                    b.Navigation("PowerMeters");

                    b.Navigation("RentEEquipmentHs");

                    b.Navigation("RentEquipmentComs");

                    b.Navigation("RentLanguages");

                    b.Navigation("RentTypeWarmings");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Pro.Entities.identity.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pro.Entities.identity.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Owners");

                    b.Navigation("Rents");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
